plugins {
    id 'com.palantir.docker' version '0.35.0'
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'SamDaSu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.testng:testng:7.1.0'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'junit:junit:4.13.1'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //    h2 DB
    runtimeOnly 'com.h2database:h2'

    //    MySQL DB
    implementation "mysql:mysql-connector-java:8.0.33"

    //  spring-validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //actuator 추가
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //프로메테우스가 사용하는 포멧에 맞추어 메트릭 만들기
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //    lombok Test 환경 scope 추가
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //    SQL 로그 확인
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'

    //    Spring Security 적용
    implementation "org.springframework.boot:spring-boot-starter-security"
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //    Thumbnailator
    implementation group: 'net.coobird', name: 'thumbnailator', version: '0.4.1'

    // 엑셀파일 DB 삽입
    implementation 'org.apache.poi:poi:5.0.0'
    implementation 'org.apache.poi:poi-ooxml:5.0.0'
    implementation 'com.opencsv:opencsv:5.5.2'

    // 객체 변환 및 직렬화
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.4'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.4'

    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    implementation 'com.auth0:java-jwt:4.3.0'

    //HS512 알고리즘을 사용을 위해 secret key는 64B(512bit) 이상을 사용
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'

    // queryDSL 설정
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드
}

tasks.named('test') {
    useJUnitPlatform()
}


docker {
    //디버깅
    println(tasks.bootJar.outputs.files)
    //이미지 이름
    name rootProject.name + '-' + project.name + ":" + version
    // 어떤 Dockerfile
    dockerfile file('./Dockerfile')
    //어떤 파일들을 Dockerfile에 복사할 것인가
    files tasks.bootJar.outputs.files
    //Dockerfile 에 전달할 인자
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}